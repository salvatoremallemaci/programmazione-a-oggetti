package it.polito.oop.books;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import static java.util.stream.Collectors.*;

public class Book {
	
	Map<String,Topic> argomenti = new TreeMap<>();
	List<TheoryChapter> listaTeoria = new ArrayList<>();
	List<ExerciseChapter> listaEsercizi = new ArrayList<>();
	List<Question> domande = new ArrayList<>();

    /**
	 * Creates a new topic, if it does not exist yet, or returns a reference to the
	 * corresponding topic.
	 * 
	 * @param keyword the unique keyword of the topic
	 * @return the {@link Topic} associated to the keyword
	 * @throws BookException
	 */
	public Topic getTopic(String keyword) throws BookException {
		
		if(keyword.equals("") || keyword.equals(null))
			throw new BookException();
		if(argomenti.containsKey(keyword))
			return argomenti.get(keyword);
		Topic t = new Topic(keyword);
		argomenti.put(keyword, t);
	    return t;
	}

	public Question createQuestion(String question, Topic mainTopic) {
		
		Question q = new Question(question, mainTopic);
		domande.add(q);
        return q;
	}

	public TheoryChapter createTheoryChapter(String title, int numPages, String text) {
		TheoryChapter tC = new TheoryChapter(title, numPages, text);
		listaTeoria.add(tC);
        return tC;
	}

	public ExerciseChapter createExerciseChapter(String title, int numPages) {
		ExerciseChapter eC = new ExerciseChapter(title, numPages);
		listaEsercizi.add(eC);
        return eC;
	}

	public List<Topic> getAllTopics() {
		
		List<Topic> argomenti = new ArrayList<>();
		
		listaTeoria.stream()
		.map((TheoryChapter t) -> t.getTopics())
		.forEach(t -> argomenti.addAll(t));
		
		listaEsercizi.stream()
		.map((ExerciseChapter e) -> e.getTopics())
		.forEach(e -> argomenti.addAll(e));
		
		return argomenti.stream()
		.distinct()
		.sorted(Comparator.comparing(Topic::getKeyword))
		.collect(toList());
	}

	public boolean checkTopics() {
		List<Topic> argomentiCapitoliEsercizi = new ArrayList<>();
		listaEsercizi.stream()
		.map(e -> e.getTopics())
		.forEach(e -> argomentiCapitoliEsercizi.addAll(e));
		
		for (TheoryChapter tC : listaTeoria) {
			if(tC.getTopics().containsAll(argomentiCapitoliEsercizi))
				return true;
		}
		
        return false;
	}

	public Assignment newAssignment(String ID, ExerciseChapter chapter) {
		
        return null;
	}
	
    /**
     * builds a map having as key the number of answers and 
     * as values the list of questions having that number of answers.
     * @return
     */
    public Map<Long,List<Question>> questionOptions(){
    	
    	return domande.stream()
    	.collect(groupingBy(
    			Question::numAnswers,
    			TreeMap::new,
    			toList()
    			));
    }
}
